This Course will be focused on:
    - Window Function
    - Statistical Function
    - Approximation Function


#### Advanced Function (Statistical, Analytics, and user-defined)

Statistical function example:
    SELECT
        STDDEV(noemployeesw3cnt) AS st_dev_employee_count,
        CORR(totprgmrevenue, totfuncexpns) AS corr_rev_expensses
    FROM
        ''

    ## STDDEV - Standard Deviation
    ## CORR - Correlation [in example above, how correlated the program revenue with total functional expenses]

## RANK() Advanced function, for Aggregating over groups of rows

SELECT firstname, departement, startdate
    RANK() OVER ( PARTITION BY departement ORDER BY startdate ) AS rank
FROM employees

## BigQuery User Defined Function(s) - UDFs

CREATE FUNCTION d2i_demo.nlp_compromise_people(str STRING)
    RETURN ARRAY<STRING> LANGUAGE js AS '''
        return nlp(str).people().out('topk').map(x => x.normal)
    '''
    OPTION(
        library="gs://cloud-training/datatoinsights/assets/compromise.min.11.14.0.js"
    );

SELECT name, COUNT(*) c
FROM (
    SELECT d2i_demo.nlp_compromise_people(title) as names
    FROM `d2i_demo.reddit_post`
    WHERE subreddit = 'movies'
), UNNEST(names) name

WHERE name LIKE '% %' GROUP BY 1
ORDER BY 2 DESC LIMIT 10

## sooo some fun example if you want to have a shot in sentiment analysis by looking twitter and reddit comments or seeing
## the closeness between words, you could use JavaScript library inside BigQuery. You can invoke those or call those JS Libraries
## if they're stored in Google Cloud Storage bucket

## Using WITH clauses (CTEs) and Subqueries | CTE = Common Table Expression

example:

#standarSQL
#CTEs

WITH

    # 2015 Fillings joined with orgs detail
    irs_990_2015_ein AS (
        SELECT *
        FROM
            `bigquery-public-data.irs_990.irs_990_2015`
        JOIN
            `bigquery-public-data.irs_990.irs_990_ein` USING (ein)
    ),

    # duplicate EINs in the orgs detail
    duplicate AS (
        SELECT
            ein AS ein,
            COUNT(ein) as ein_count
        FROM
            irs_990_2015_ein
        GROUP BY
            ein
        HAVING
            ein_count > 1
    )

# return results to store in a permanent table
SELECT
    irs_990.ein AS ein,
    irs_990.name AS name,
    irs_990.noemployeesw3cnt AS num_employees,
    irs_990.grsrcptspublicuse AS gross_receipts,

    # more field ommited for brevity
FROM 
    irs_990_2015 AS irs_990
LEFT JOIN
    duplicates
ON
    irs_990.ein = duplicates.ein
WHERE
    # filter out duplicate records
    duplicate.ein IS NULL


########### BigQuery versus traditional relational data architecture

# Normalize table
-> basically just break appart big fatass table to small column relational table